-- Cargar REGIONS
CREATE OR REPLACE PROCEDURE LOAD_REGIONS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT REGION, REGION_URL, COUNTRY, STATE_DATA, LAT, LONGITUDE
      FROM TMP_CRAIGSLIST_VEHICLES
      WHERE REGION IS NOT NULL AND TRIM(REGION) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM REGIONS
          WHERE REGION = rec.REGION AND REGION_URL = rec.REGION_URL
            AND COUNTRY = rec.COUNTRY AND STATE_DATA = rec.STATE_DATA
            AND LAT = rec.LAT AND LONGITUDE = rec.LONGITUDE;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO REGIONS (REGION, REGION_URL, COUNTRY, STATE_DATA, LAT, LONGITUDE)
            VALUES (rec.REGION, rec.REGION_URL, rec.COUNTRY, rec.STATE_DATA, rec.LAT, rec.LONGITUDE);
      END;
   END LOOP;
END;
/

-- Cargar MANUFACTURERS
CREATE OR REPLACE PROCEDURE LOAD_MANUFACTURERS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT MANUFACTURER FROM TMP_CRAIGSLIST_VEHICLES
      WHERE MANUFACTURER IS NOT NULL AND TRIM(MANUFACTURER) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM MANUFACTURERS WHERE NAME = rec.MANUFACTURER;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO MANUFACTURERS (NAME) VALUES (rec.MANUFACTURER);
      END;
   END LOOP;
END;
/

-- Cargar CONDITIONS
CREATE OR REPLACE PROCEDURE LOAD_CONDITIONS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT CONDITION FROM TMP_CRAIGSLIST_VEHICLES
      WHERE CONDITION IS NOT NULL AND TRIM(CONDITION) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM CONDITIONS WHERE NAME = rec.CONDITION;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO CONDITIONS (NAME) VALUES (rec.CONDITION);
      END;
   END LOOP;
END;
/

-- Cargar CYLINDERS
CREATE OR REPLACE PROCEDURE LOAD_CYLINDERS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT CYLINDERS FROM TMP_CRAIGSLIST_VEHICLES
      WHERE CYLINDERS IS NOT NULL AND TRIM(CYLINDERS) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM CYLINDERS WHERE NAME = rec.CYLINDERS;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO CYLINDERS (NAME) VALUES (rec.CYLINDERS);
      END;
   END LOOP;
END;
/

-- Cargar FUELS
CREATE OR REPLACE PROCEDURE LOAD_FUELS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT FUEL FROM TMP_CRAIGSLIST_VEHICLES
      WHERE FUEL IS NOT NULL AND TRIM(FUEL) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM FUELS WHERE NAME = rec.FUEL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO FUELS (NAME) VALUES (rec.FUEL);
      END;
   END LOOP;
END;
/

-- Cargar TITLE_STATUSES
CREATE OR REPLACE PROCEDURE LOAD_TITLE_STATUSES AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT TITLE_STATUS FROM TMP_CRAIGSLIST_VEHICLES
      WHERE TITLE_STATUS IS NOT NULL AND TRIM(TITLE_STATUS) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM TITLE_STATUSES WHERE NAME = rec.TITLE_STATUS;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO TITLE_STATUSES (NAME) VALUES (rec.TITLE_STATUS);
      END;
   END LOOP;
END;
/

-- Cargar TRANSMISSIONS
CREATE OR REPLACE PROCEDURE LOAD_TRANSMISSIONS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT TRANSMISSION FROM TMP_CRAIGSLIST_VEHICLES
      WHERE TRANSMISSION IS NOT NULL AND TRIM(TRANSMISSION) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM TRANSMISSIONS WHERE NAME = rec.TRANSMISSION;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO TRANSMISSIONS (NAME) VALUES (rec.TRANSMISSION);
      END;
   END LOOP;
END;
/

-- Cargar DRIVES
CREATE OR REPLACE PROCEDURE LOAD_DRIVES AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT DRIVE FROM TMP_CRAIGSLIST_VEHICLES
      WHERE DRIVE IS NOT NULL AND TRIM(DRIVE) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM DRIVES WHERE NAME = rec.DRIVE;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO DRIVES (NAME) VALUES (rec.DRIVE);
      END;
   END LOOP;
END;
/

-- Cargar SIZES
CREATE OR REPLACE PROCEDURE LOAD_SIZES AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT SIZE_DATA FROM TMP_CRAIGSLIST_VEHICLES
      WHERE SIZE_DATA IS NOT NULL AND TRIM(SIZE_DATA) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM SIZES WHERE NAME = rec.SIZE_DATA;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO SIZES (NAME) VALUES (rec.SIZE_DATA);
      END;
   END LOOP;
END;
/

-- Cargar TYPES
CREATE OR REPLACE PROCEDURE LOAD_TYPES AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT TYPE_DATA FROM TMP_CRAIGSLIST_VEHICLES
      WHERE TYPE_DATA IS NOT NULL AND TRIM(TYPE_DATA) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM TYPES WHERE NAME = rec.TYPE_DATA;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO TYPES (NAME) VALUES (rec.TYPE_DATA);
      END;
   END LOOP;
END;
/

-- Cargar PAINT_COLORS
CREATE OR REPLACE PROCEDURE LOAD_PAINT_COLORS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT PAINT_COLOR FROM TMP_CRAIGSLIST_VEHICLES
      WHERE PAINT_COLOR IS NOT NULL AND TRIM(PAINT_COLOR) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM PAINT_COLORS WHERE NAME = rec.PAINT_COLOR;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO PAINT_COLORS (NAME) VALUES (rec.PAINT_COLOR);
      END;
   END LOOP;
END;
/

-- Cargar VEHICLES (requiere que las tablas referenciales ya estén cargadas)
CREATE OR REPLACE PROCEDURE LOAD_VEHICLES AS
   v_region_id       NUMBER;
   v_manufacturer_id NUMBER;
   v_condition_id    NUMBER;
   v_cylinders_id    NUMBER;
   v_fuel_id         NUMBER;
   v_title_status_id NUMBER;
   v_transmission_id NUMBER;
   v_drive_id        NUMBER;
   v_size_id         NUMBER;
   v_type_id         NUMBER;
   v_paint_color_id  NUMBER;
BEGIN
   FOR rec IN (SELECT * FROM TMP_CRAIGSLIST_VEHICLES) LOOP
      -- Obtener IDs referenciales
      BEGIN
         SELECT ID INTO v_region_id FROM REGIONS
            WHERE REGION = rec.REGION AND REGION_URL = rec.REGION_URL
              AND COUNTRY = rec.COUNTRY AND STATE_DATA = rec.STATE_DATA
              AND LAT = rec.LAT AND LONGITUDE = rec.LONGITUDE;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_region_id := NULL; END;

      BEGIN SELECT ID INTO v_manufacturer_id FROM MANUFACTURERS WHERE NAME = rec.MANUFACTURER;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_manufacturer_id := NULL; END;

      BEGIN SELECT ID INTO v_condition_id FROM CONDITIONS WHERE NAME = rec.CONDITION;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_condition_id := NULL; END;

      BEGIN SELECT ID INTO v_cylinders_id FROM CYLINDERS WHERE NAME = rec.CYLINDERS;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_cylinders_id := NULL; END;

      BEGIN SELECT ID INTO v_fuel_id FROM FUELS WHERE NAME = rec.FUEL;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_fuel_id := NULL; END;

      BEGIN SELECT ID INTO v_title_status_id FROM TITLE_STATUSES WHERE NAME = rec.TITLE_STATUS;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_title_status_id := NULL; END;

      BEGIN SELECT ID INTO v_transmission_id FROM TRANSMISSIONS WHERE NAME = rec.TRANSMISSION;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_transmission_id := NULL; END;

      BEGIN SELECT ID INTO v_drive_id FROM DRIVES WHERE NAME = rec.DRIVE;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_drive_id := NULL; END;

      BEGIN SELECT ID INTO v_size_id FROM SIZES WHERE NAME = rec.SIZE_DATA;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_size_id := NULL; END;

      BEGIN SELECT ID INTO v_type_id FROM TYPES WHERE NAME = rec.TYPE_DATA;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_type_id := NULL; END;

      BEGIN SELECT ID INTO v_paint_color_id FROM PAINT_COLORS WHERE NAME = rec.PAINT_COLOR;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_paint_color_id := NULL; END;

      -- Insertar vehículo
      BEGIN
         INSERT INTO VEHICLES (
            URL, REGION_ID, PRICE, YEAR, MANUFACTURER_ID, MODEL,
            CONDITION_ID, CYLINDERS_ID, FUEL_ID, ODOMETER,
            TITLE_STATUS_ID, TRANSMISSION_ID, VIN, DRIVE_ID,
            SIZE_ID, TYPE_ID, PAINT_COLOR_ID, IMAGE_URL,
            DESCRIPTION_DATA, POSTING_DATE
         )
         VALUES (
            rec.URL, v_region_id, rec.PRICE, rec.YEAR_DATA, v_manufacturer_id, rec.MODEL,
            v_condition_id, v_cylinders_id, v_fuel_id, rec.ODOMETER,
            v_title_status_id, v_transmission_id, rec.VIN, v_drive_id,
            v_size_id, v_type_id, v_paint_color_id, rec.IMAGE_URL,
            rec.DESCRIPTION_DATA, TO_DATE(rec.POSTING_DATE, 'YYYY-MM-DD')
         );
      EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN NULL;
         WHEN OTHERS THEN NULL;
      END;
   END LOOP;
END;
/


-- BLOQUE ANÓNIMO PARA EJECUTAR TODAS LAS CARGAS
BEGIN
   DBMS_OUTPUT.PUT_LINE('Iniciando proceso de carga de datos...');
   
   -- Cargar tablas de catálogo primero (tablas independientes)
   DBMS_OUTPUT.PUT_LINE('Cargando REGIONS...');
   LOAD_REGIONS;
   DBMS_OUTPUT.PUT_LINE('REGIONS cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando MANUFACTURERS...');
   LOAD_MANUFACTURERS;
   DBMS_OUTPUT.PUT_LINE('MANUFACTURERS cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando CONDITIONS...');
   LOAD_CONDITIONS;
   DBMS_OUTPUT.PUT_LINE('CONDITIONS cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando CYLINDERS...');
   LOAD_CYLINDERS;
   DBMS_OUTPUT.PUT_LINE('CYLINDERS cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando FUELS...');
   LOAD_FUELS;
   DBMS_OUTPUT.PUT_LINE('FUELS cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando TITLE_STATUSES...');
   LOAD_TITLE_STATUSES;
   DBMS_OUTPUT.PUT_LINE('TITLE_STATUSES cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando TRANSMISSIONS...');
   LOAD_TRANSMISSIONS;
   DBMS_OUTPUT.PUT_LINE('TRANSMISSIONS cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando DRIVES...');
   LOAD_DRIVES;
   DBMS_OUTPUT.PUT_LINE('DRIVES cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando SIZES...');
   LOAD_SIZES;
   DBMS_OUTPUT.PUT_LINE('SIZES cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando TYPES...');
   LOAD_TYPES;
   DBMS_OUTPUT.PUT_LINE('TYPES cargadas exitosamente.');
   
   DBMS_OUTPUT.PUT_LINE('Cargando PAINT_COLORS...');
   LOAD_PAINT_COLORS;
   DBMS_OUTPUT.PUT_LINE('PAINT_COLORS cargadas exitosamente.');
   
   -- Finalmente cargar la tabla principal que depende de todas las anteriores
   DBMS_OUTPUT.PUT_LINE('Cargando VEHICLES...');
   LOAD_VEHICLES;
   DBMS_OUTPUT.PUT_LINE('VEHICLES cargadas exitosamente.');
   
   -- Mostrar estadísticas de carga
   DBMS_OUTPUT.PUT_LINE('=== ESTADÍSTICAS DE CARGA ===');
   
   FOR rec IN (SELECT 'REGIONS' AS tabla, COUNT(*) AS total FROM REGIONS
               UNION ALL
               SELECT 'MANUFACTURERS', COUNT(*) FROM MANUFACTURERS
               UNION ALL
               SELECT 'CONDITIONS', COUNT(*) FROM CONDITIONS
               UNION ALL
               SELECT 'CYLINDERS', COUNT(*) FROM CYLINDERS
               UNION ALL
               SELECT 'FUELS', COUNT(*) FROM FUELS
               UNION ALL
               SELECT 'TITLE_STATUSES', COUNT(*) FROM TITLE_STATUSES
               UNION ALL
               SELECT 'TRANSMISSIONS', COUNT(*) FROM TRANSMISSIONS
               UNION ALL
               SELECT 'DRIVES', COUNT(*) FROM DRIVES
               UNION ALL
               SELECT 'SIZES', COUNT(*) FROM SIZES
               UNION ALL
               SELECT 'TYPES', COUNT(*) FROM TYPES
               UNION ALL
               SELECT 'PAINT_COLORS', COUNT(*) FROM PAINT_COLORS
               UNION ALL
               SELECT 'VEHICLES', COUNT(*) FROM VEHICLES) LOOP
      DBMS_OUTPUT.PUT_LINE(rec.tabla || ': ' || rec.total || ' registros');
   END LOOP;
   
   DBMS_OUTPUT.PUT_LINE('Proceso de carga completado exitosamente.');
   
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('ERROR durante la carga: ' || SQLERRM);
      RAISE;
END;
/