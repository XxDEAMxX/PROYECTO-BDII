CREATE TABLESPACE TS_DATOS
   DATAFILE 'ts_datos01.dbf' SIZE 300M
   AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;

-- Tablespace para índices
CREATE TABLESPACE TS_INDICES
   DATAFILE 'ts_indices01.dbf' SIZE 50M
   AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;


-- Crear usuario
CREATE USER CARS_USER IDENTIFIED BY A123
   DEFAULT TABLESPACE TS_DATOS
   TEMPORARY TABLESPACE TEMP
   QUOTA UNLIMITED ON TS_DATOS
   QUOTA UNLIMITED ON TS_INDICES;

-- Permisos mínimos necesarios
GRANT
   CREATE SESSION
TO CARS_USER;
GRANT
   CREATE TABLE
TO CARS_USER;
GRANT
   CREATE VIEW
TO CARS_USER;
GRANT
   CREATE PROCEDURE
TO CARS_USER;
GRANT
   CREATE TRIGGER
TO CARS_USER;
GRANT
   CREATE SEQUENCE
TO CARS_USER;
GRANT
   CREATE SYNONYM
TO CARS_USER;

CREATE TABLE TMP_CRAIGSLIST_VEHICLES (
   ID               NUMBER,
   URL              VARCHAR2(1000),
   REGION           VARCHAR2(100),
   REGION_URL       VARCHAR2(100),
   PRICE            NUMBER,
   YEAR_DATA        NUMBER,
   MANUFACTURER     VARCHAR2(100),
   MODEL            VARCHAR2(300),
   CONDITION        VARCHAR2(50),
   CYLINDERS        VARCHAR2(50),
   FUEL             VARCHAR2(50),
   ODOMETER         NUMBER,
   TITLE_STATUS     VARCHAR2(50),
   TRANSMISSION     VARCHAR2(50),
   VIN              VARCHAR2(50),
   DRIVE            VARCHAR2(50),
   SIZE_DATA        VARCHAR2(50),
   TYPE_DATA        VARCHAR2(50),
   PAINT_COLOR      VARCHAR2(50),
   IMAGE_URL        VARCHAR2(1000),
   DESCRIPTION_DATA CLOB,
   COUNTRY          VARCHAR2(100),
   STATE_DATA       VARCHAR2(50),
   LAT              NUMBER,
   LONGITUDE        NUMBER,
   POSTING_DATE     VARCHAR2(100)
)
TABLESPACE TS_DATOS;

-------

CREATE SEQUENCE SEQ_VEHICLES_ID START WITH 1 INCREMENT BY 1 NOCACHE;
-- Tabla principal de vehículos
CREATE TABLE VEHICLES (
   ID               NUMBER DEFAULT SEQ_VEHICLES_ID.NEXTVAL,
   URL              VARCHAR2(1000),
   REGION_ID        NUMBER,
   PRICE            NUMBER,
   YEAR             NUMBER,
   MANUFACTURER_ID  NUMBER,
   MODEL            VARCHAR2(300),
   CONDITION_ID     NUMBER,
   CYLINDERS_ID     NUMBER,
   FUEL_ID          NUMBER,
   ODOMETER         NUMBER,
   TITLE_STATUS_ID  NUMBER,
   TRANSMISSION_ID  NUMBER,
   VIN              VARCHAR2(50),
   DRIVE_ID         NUMBER,
   SIZE_ID          NUMBER,
   TYPE_ID          NUMBER,
   PAINT_COLOR_ID   NUMBER,
   IMAGE_URL        VARCHAR2(1000),
   DESCRIPTION_DATA CLOB,
   POSTING_DATE     DATE
);

CREATE SEQUENCE SEQ_REGIONS_ID START WITH 1 INCREMENT BY 1 NOCACHE;
-- Tabla de regiones
CREATE TABLE REGIONS (
   ID         NUMBER DEFAULT SEQ_REGIONS_ID.NEXTVAL,
   REGION     VARCHAR2(100),
   REGION_URL VARCHAR2(100),
   COUNTRY    VARCHAR2(100),
   STATE_DATA VARCHAR2(50),
   LAT        NUMBER,
   LONGITUDE  NUMBER
);

CREATE SEQUENCE SEQ_MANUFACTURERS_ID START WITH 1 INCREMENT BY 1 NOCACHE;
-- Tabla de fabricantes
CREATE TABLE MANUFACTURERS (
   ID   NUMBER DEFAULT SEQ_MANUFACTURERS_ID.NEXTVAL,
   NAME VARCHAR2(100)
);

CREATE SEQUENCE SEQ_CONDITIONS_ID START WITH 1 INCREMENT BY 1 NOCACHE;
-- Tablas para atributos categóricos
CREATE TABLE CONDITIONS (
   ID   NUMBER DEFAULT SEQ_CONDITIONS_ID.NEXTVAL,
   NAME VARCHAR2(50)
);

CREATE SEQUENCE SEQ_CYLINDERS_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE TABLE CYLINDERS (
   ID   NUMBER DEFAULT SEQ_CYLINDERS_ID.NEXTVAL,
   NAME VARCHAR2(50)
);

CREATE SEQUENCE SEQ_FUELS_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE TABLE FUELS (
   ID   NUMBER DEFAULT SEQ_FUELS_ID.NEXTVAL,
   NAME VARCHAR2(50)
);

CREATE SEQUENCE SEQ_TITLE_STATUSES_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE TABLE TITLE_STATUSES (
   ID   NUMBER DEFAULT SEQ_TITLE_STATUSES_ID.NEXTVAL,
   NAME VARCHAR2(50)
);

CREATE SEQUENCE SEQ_TRANSMISSIONS_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE TABLE TRANSMISSIONS (
   ID   NUMBER DEFAULT SEQ_TRANSMISSIONS_ID.NEXTVAL,
   NAME VARCHAR2(50)
);

CREATE SEQUENCE SEQ_DRIVES_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE TABLE DRIVES (
   ID   NUMBER DEFAULT SEQ_DRIVES_ID.NEXTVAL,
   NAME VARCHAR2(50)
);

CREATE SEQUENCE SEQ_SIZES_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE TABLE SIZES (
   ID   NUMBER DEFAULT SEQ_SIZES_ID.NEXTVAL,
   NAME VARCHAR2(50)
);

CREATE SEQUENCE SEQ_TYPES_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE TABLE TYPES (
   ID   NUMBER DEFAULT SEQ_TYPES_ID.NEXTVAL,
   NAME VARCHAR2(50)
);

CREATE SEQUENCE SEQ_PAINT_COLORS_ID START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE TABLE PAINT_COLORS (
   ID   NUMBER DEFAULT SEQ_PAINT_COLORS_ID.NEXTVAL,
   NAME VARCHAR2(50)
);


-- PRIMARY KEYS
ALTER TABLE VEHICLES ADD CONSTRAINT PK_VEHICLES PRIMARY KEY ( ID );
ALTER TABLE REGIONS ADD CONSTRAINT PK_REGIONS PRIMARY KEY ( ID );
ALTER TABLE MANUFACTURERS ADD CONSTRAINT PK_MANUFACTURERS PRIMARY KEY ( ID );
ALTER TABLE CONDITIONS ADD CONSTRAINT PK_CONDITIONS PRIMARY KEY ( ID );
ALTER TABLE CYLINDERS ADD CONSTRAINT PK_CYLINDERS PRIMARY KEY ( ID );
ALTER TABLE FUELS ADD CONSTRAINT PK_FUELS PRIMARY KEY ( ID );
ALTER TABLE TITLE_STATUSES ADD CONSTRAINT PK_TITLE_STATUSES PRIMARY KEY ( ID );
ALTER TABLE TRANSMISSIONS ADD CONSTRAINT PK_TRANSMISSIONS PRIMARY KEY ( ID );
ALTER TABLE DRIVES ADD CONSTRAINT PK_DRIVES PRIMARY KEY ( ID );
ALTER TABLE SIZES ADD CONSTRAINT PK_SIZES PRIMARY KEY ( ID );
ALTER TABLE TYPES ADD CONSTRAINT PK_TYPES PRIMARY KEY ( ID );
ALTER TABLE PAINT_COLORS ADD CONSTRAINT PK_PAINT_COLORS PRIMARY KEY ( ID );

-- FOREIGN KEYS
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_REGION FOREIGN KEY ( REGION_ID )
      REFERENCES REGIONS ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_MANUFACTURER FOREIGN KEY ( MANUFACTURER_ID )
      REFERENCES MANUFACTURERS ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_CONDITION FOREIGN KEY ( CONDITION_ID )
      REFERENCES CONDITIONS ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_CYLINDERS FOREIGN KEY ( CYLINDERS_ID )
      REFERENCES CYLINDERS ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_FUEL FOREIGN KEY ( FUEL_ID )
      REFERENCES FUELS ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_TITLE FOREIGN KEY ( TITLE_STATUS_ID )
      REFERENCES TITLE_STATUSES ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_TRANSMISSION FOREIGN KEY ( TRANSMISSION_ID )
      REFERENCES TRANSMISSIONS ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_DRIVE FOREIGN KEY ( DRIVE_ID )
      REFERENCES DRIVES ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_SIZE FOREIGN KEY ( SIZE_ID )
      REFERENCES SIZES ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_TYPE FOREIGN KEY ( TYPE_ID )
      REFERENCES TYPES ( ID );
ALTER TABLE VEHICLES
   ADD CONSTRAINT FK_VEHICLE_COLOR FOREIGN KEY ( PAINT_COLOR_ID )
      REFERENCES PAINT_COLORS ( ID );

-- UNIQUE CONSTRAINTS (Ejemplo: evitar nombres repetidos en atributos categóricos)
ALTER TABLE MANUFACTURERS ADD CONSTRAINT UQ_MANUFACTURER_NAME UNIQUE ( NAME );
ALTER TABLE CONDITIONS ADD CONSTRAINT UQ_CONDITION_NAME UNIQUE ( NAME );
ALTER TABLE CYLINDERS ADD CONSTRAINT UQ_CYLINDERS_NAME UNIQUE ( NAME );
ALTER TABLE FUELS ADD CONSTRAINT UQ_FUEL_NAME UNIQUE ( NAME );
ALTER TABLE TITLE_STATUSES ADD CONSTRAINT UQ_TITLE_STATUS_NAME UNIQUE ( NAME );
ALTER TABLE TRANSMISSIONS ADD CONSTRAINT UQ_TRANSMISSION_NAME UNIQUE ( NAME );
ALTER TABLE DRIVES ADD CONSTRAINT UQ_DRIVE_NAME UNIQUE ( NAME );
ALTER TABLE SIZES ADD CONSTRAINT UQ_SIZE_NAME UNIQUE ( NAME );
ALTER TABLE TYPES ADD CONSTRAINT UQ_TYPE_NAME UNIQUE ( NAME );
ALTER TABLE PAINT_COLORS ADD CONSTRAINT UQ_PAINT_COLOR_NAME UNIQUE ( NAME );

-- CHECK CONSTRAINTS (Ejemplo: año válido y odómetro positivo)
-- ALTER TABLE vehicles ADD CONSTRAINT chk_year_valid CHECK (year BETWEEN 1900 AND EXTRACT(YEAR FROM SYSDATE));
ALTER TABLE VEHICLES ADD CONSTRAINT CHK_ODOMETER_POSITIVE CHECK ( ODOMETER >= 0 );

-- Cargar REGIONS
CREATE OR REPLACE PROCEDURE LOAD_REGIONS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT REGION, REGION_URL, COUNTRY, STATE_DATA, LAT, LONGITUDE
      FROM TMP_CRAIGSLIST_VEHICLES
      WHERE REGION IS NOT NULL AND TRIM(REGION) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM REGIONS
          WHERE REGION = rec.REGION AND REGION_URL = rec.REGION_URL
            AND COUNTRY = rec.COUNTRY AND STATE_DATA = rec.STATE_DATA
            AND LAT = rec.LAT AND LONGITUDE = rec.LONGITUDE;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO REGIONS (REGION, REGION_URL, COUNTRY, STATE_DATA, LAT, LONGITUDE)
            VALUES (rec.REGION, rec.REGION_URL, rec.COUNTRY, rec.STATE_DATA, rec.LAT, rec.LONGITUDE);
      END;
   END LOOP;
END;
/

-- Cargar MANUFACTURERS
CREATE OR REPLACE PROCEDURE LOAD_MANUFACTURERS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT MANUFACTURER FROM TMP_CRAIGSLIST_VEHICLES
      WHERE MANUFACTURER IS NOT NULL AND TRIM(MANUFACTURER) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM MANUFACTURERS WHERE NAME = rec.MANUFACTURER;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO MANUFACTURERS (NAME) VALUES (rec.MANUFACTURER);
      END;
   END LOOP;
END;
/

-- Cargar CONDITIONS
CREATE OR REPLACE PROCEDURE LOAD_CONDITIONS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT CONDITION FROM TMP_CRAIGSLIST_VEHICLES
      WHERE CONDITION IS NOT NULL AND TRIM(CONDITION) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM CONDITIONS WHERE NAME = rec.CONDITION;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO CONDITIONS (NAME) VALUES (rec.CONDITION);
      END;
   END LOOP;
END;
/

-- Cargar CYLINDERS
CREATE OR REPLACE PROCEDURE LOAD_CYLINDERS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT CYLINDERS FROM TMP_CRAIGSLIST_VEHICLES
      WHERE CYLINDERS IS NOT NULL AND TRIM(CYLINDERS) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM CYLINDERS WHERE NAME = rec.CYLINDERS;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO CYLINDERS (NAME) VALUES (rec.CYLINDERS);
      END;
   END LOOP;
END;
/

-- Cargar FUELS
CREATE OR REPLACE PROCEDURE LOAD_FUELS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT FUEL FROM TMP_CRAIGSLIST_VEHICLES
      WHERE FUEL IS NOT NULL AND TRIM(FUEL) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM FUELS WHERE NAME = rec.FUEL;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO FUELS (NAME) VALUES (rec.FUEL);
      END;
   END LOOP;
END;
/

-- Cargar TITLE_STATUSES
CREATE OR REPLACE PROCEDURE LOAD_TITLE_STATUSES AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT TITLE_STATUS FROM TMP_CRAIGSLIST_VEHICLES
      WHERE TITLE_STATUS IS NOT NULL AND TRIM(TITLE_STATUS) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM TITLE_STATUSES WHERE NAME = rec.TITLE_STATUS;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO TITLE_STATUSES (NAME) VALUES (rec.TITLE_STATUS);
      END;
   END LOOP;
END;
/

-- Cargar TRANSMISSIONS
CREATE OR REPLACE PROCEDURE LOAD_TRANSMISSIONS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT TRANSMISSION FROM TMP_CRAIGSLIST_VEHICLES
      WHERE TRANSMISSION IS NOT NULL AND TRIM(TRANSMISSION) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM TRANSMISSIONS WHERE NAME = rec.TRANSMISSION;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO TRANSMISSIONS (NAME) VALUES (rec.TRANSMISSION);
      END;
   END LOOP;
END;
/

-- Cargar DRIVES
CREATE OR REPLACE PROCEDURE LOAD_DRIVES AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT DRIVE FROM TMP_CRAIGSLIST_VEHICLES
      WHERE DRIVE IS NOT NULL AND TRIM(DRIVE) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM DRIVES WHERE NAME = rec.DRIVE;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO DRIVES (NAME) VALUES (rec.DRIVE);
      END;
   END LOOP;
END;
/

-- Cargar SIZES
CREATE OR REPLACE PROCEDURE LOAD_SIZES AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT SIZE_DATA FROM TMP_CRAIGSLIST_VEHICLES
      WHERE SIZE_DATA IS NOT NULL AND TRIM(SIZE_DATA) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM SIZES WHERE NAME = rec.SIZE_DATA;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO SIZES (NAME) VALUES (rec.SIZE_DATA);
      END;
   END LOOP;
END;
/

-- Cargar TYPES
CREATE OR REPLACE PROCEDURE LOAD_TYPES AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT TYPE_DATA FROM TMP_CRAIGSLIST_VEHICLES
      WHERE TYPE_DATA IS NOT NULL AND TRIM(TYPE_DATA) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM TYPES WHERE NAME = rec.TYPE_DATA;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO TYPES (NAME) VALUES (rec.TYPE_DATA);
      END;
   END LOOP;
END;
/

-- Cargar PAINT_COLORS
CREATE OR REPLACE PROCEDURE LOAD_PAINT_COLORS AS
   v_id NUMBER;
BEGIN
   FOR rec IN (
      SELECT DISTINCT PAINT_COLOR FROM TMP_CRAIGSLIST_VEHICLES
      WHERE PAINT_COLOR IS NOT NULL AND TRIM(PAINT_COLOR) IS NOT NULL
   ) LOOP
      BEGIN
         SELECT ID INTO v_id FROM PAINT_COLORS WHERE NAME = rec.PAINT_COLOR;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
            INSERT INTO PAINT_COLORS (NAME) VALUES (rec.PAINT_COLOR);
      END;
   END LOOP;
END;
/

-- Cargar VEHICLES (requiere que las tablas referenciales ya estén cargadas)
CREATE OR REPLACE PROCEDURE LOAD_VEHICLES AS
   v_region_id       NUMBER;
   v_manufacturer_id NUMBER;
   v_condition_id    NUMBER;
   v_cylinders_id    NUMBER;
   v_fuel_id         NUMBER;
   v_title_status_id NUMBER;
   v_transmission_id NUMBER;
   v_drive_id        NUMBER;
   v_size_id         NUMBER;
   v_type_id         NUMBER;
   v_paint_color_id  NUMBER;
BEGIN
   FOR rec IN (SELECT * FROM TMP_CRAIGSLIST_VEHICLES) LOOP
      -- Obtener IDs referenciales
      BEGIN
         SELECT ID INTO v_region_id FROM REGIONS
            WHERE REGION = rec.REGION AND REGION_URL = rec.REGION_URL
              AND COUNTRY = rec.COUNTRY AND STATE_DATA = rec.STATE_DATA
              AND LAT = rec.LAT AND LONGITUDE = rec.LONGITUDE;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_region_id := NULL; END;

      BEGIN SELECT ID INTO v_manufacturer_id FROM MANUFACTURERS WHERE NAME = rec.MANUFACTURER;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_manufacturer_id := NULL; END;

      BEGIN SELECT ID INTO v_condition_id FROM CONDITIONS WHERE NAME = rec.CONDITION;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_condition_id := NULL; END;

      BEGIN SELECT ID INTO v_cylinders_id FROM CYLINDERS WHERE NAME = rec.CYLINDERS;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_cylinders_id := NULL; END;

      BEGIN SELECT ID INTO v_fuel_id FROM FUELS WHERE NAME = rec.FUEL;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_fuel_id := NULL; END;

      BEGIN SELECT ID INTO v_title_status_id FROM TITLE_STATUSES WHERE NAME = rec.TITLE_STATUS;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_title_status_id := NULL; END;

      BEGIN SELECT ID INTO v_transmission_id FROM TRANSMISSIONS WHERE NAME = rec.TRANSMISSION;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_transmission_id := NULL; END;

      BEGIN SELECT ID INTO v_drive_id FROM DRIVES WHERE NAME = rec.DRIVE;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_drive_id := NULL; END;

      BEGIN SELECT ID INTO v_size_id FROM SIZES WHERE NAME = rec.SIZE_DATA;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_size_id := NULL; END;

      BEGIN SELECT ID INTO v_type_id FROM TYPES WHERE NAME = rec.TYPE_DATA;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_type_id := NULL; END;

      BEGIN SELECT ID INTO v_paint_color_id FROM PAINT_COLORS WHERE NAME = rec.PAINT_COLOR;
      EXCEPTION WHEN NO_DATA_FOUND THEN v_paint_color_id := NULL; END;

      -- Insertar vehículo
      BEGIN
         INSERT INTO VEHICLES (
            URL, REGION_ID, PRICE, YEAR, MANUFACTURER_ID, MODEL,
            CONDITION_ID, CYLINDERS_ID, FUEL_ID, ODOMETER,
            TITLE_STATUS_ID, TRANSMISSION_ID, VIN, DRIVE_ID,
            SIZE_ID, TYPE_ID, PAINT_COLOR_ID, IMAGE_URL,
            DESCRIPTION_DATA, POSTING_DATE
         )
         VALUES (
            rec.URL, v_region_id, rec.PRICE, rec.YEAR_DATA, v_manufacturer_id, rec.MODEL,
            v_condition_id, v_cylinders_id, v_fuel_id, rec.ODOMETER,
            v_title_status_id, v_transmission_id, rec.VIN, v_drive_id,
            v_size_id, v_type_id, v_paint_color_id, rec.IMAGE_URL,
            rec.DESCRIPTION_DATA, TO_DATE(rec.POSTING_DATE, 'YYYY-MM-DD')
         );
      EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN NULL;
         WHEN OTHERS THEN NULL;
      END;
   END LOOP;
END;
/


SELECT *
  FROM TMP_CRAIGSLIST_VEHICLES;
SELECT *
  FROM VEHICLES;
SELECT *
  FROM TITLE_STATUSES;
SELECT *
  FROM TRANSMISSIONS;
SELECT *
  FROM REGIONS;

SELECT *
  FROM PAINT_COLORS;





DROP TABLE tmp_craigslist_vehicles PURGE;

-- SELECT COUNT(1) FROM tmp_craigslist_vehicles;

-- SELECT index_name
-- FROM user_indexes
-- WHERE table_name = 'tmp_craigslist_vehicles';

-- SELECT * FROM nls_database_parameters WHERE parameter = 'NLS_CHARACTERSET';


-- drop user cars_user cascade;

-- -- Primero borra los datos de la tabla dependiente
-- DELETE FROM VEHICLES;

-- -- Luego borra datos de tablas referenciadas
-- DELETE FROM REGIONS;
-- DELETE FROM MANUFACTURERS;
-- DELETE FROM CONDITIONS;
-- DELETE FROM CYLINDERS;
-- DELETE FROM FUELS;
-- DELETE FROM TITLE_STATUSES;
-- DELETE FROM TRANSMISSIONS;
-- DELETE FROM DRIVES;
-- DELETE FROM SIZES;
-- DELETE FROM TYPES;
-- DELETE FROM PAINT_COLORS;


-- TRUNCATE TABLE VEHICLES;
-- TRUNCATE TABLE REGIONS;
-- TRUNCATE TABLE MANUFACTURERS;
-- TRUNCATE TABLE CONDITIONS;
-- TRUNCATE TABLE CYLINDERS;
-- TRUNCATE TABLE FUELS;
-- TRUNCATE TABLE TITLE_STATUSES;
-- TRUNCATE TABLE TRANSMISSIONS;
-- TRUNCATE TABLE DRIVES;
-- TRUNCATE TABLE SIZES;
-- TRUNCATE TABLE TYPES;
-- TRUNCATE TABLE PAINT_COLORS;

-- DROP TABLE VEHICLES;
-- DROP TABLE REGIONS;
-- DROP TABLE MANUFACTURERS;
-- DROP TABLE CONDITIONS;
-- DROP TABLE CYLINDERS;
-- DROP TABLE FUELS;
-- DROP TABLE TITLE_STATUSES;
-- DROP TABLE TRANSMISSIONS;
-- DROP TABLE DRIVES;
-- DROP TABLE SIZES;
-- DROP TABLE TYPES;
-- DROP TABLE PAINT_COLORS;

