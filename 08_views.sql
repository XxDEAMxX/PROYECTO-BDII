-- =====================================================
-- SCRIPT: 08_views.sql
-- PROPOSITO: Crear vistas útiles para consultas de negocio
-- AUTOR: Daniel Arevalo - Alex Hernandez
-- FECHA: Junio 2025
-- =====================================================

-- Vista completa de vehículos con todos los datos desnormalizados
CREATE OR REPLACE VIEW VW_VEHICLES_COMPLETE AS
SELECT 
   v.ID,
   v.URL,
   r.REGION,
   r.COUNTRY,
   r.STATE_DATA AS STATE,
   v.PRICE,
   v.YEAR,
   m.NAME AS MANUFACTURER,
   v.MODEL,
   c.NAME AS CONDITION,
   cy.NAME AS CYLINDERS,
   f.NAME AS FUEL,
   v.ODOMETER,
   ts.NAME AS TITLE_STATUS,
   tr.NAME AS TRANSMISSION,
   v.VIN,
   d.NAME AS DRIVE,
   s.NAME AS SIZE_CATEGORY,
   t.NAME AS TYPE_CATEGORY,
   pc.NAME AS PAINT_COLOR,
   v.IMAGE_URL,
   SUBSTR(v.DESCRIPTION_DATA, 1, 200) AS DESCRIPTION_PREVIEW,
   v.POSTING_DATE
FROM VEHICLES v
LEFT JOIN REGIONS r ON v.REGION_ID = r.ID
LEFT JOIN MANUFACTURERS m ON v.MANUFACTURER_ID = m.ID
LEFT JOIN CONDITIONS c ON v.CONDITION_ID = c.ID
LEFT JOIN CYLINDERS cy ON v.CYLINDERS_ID = cy.ID
LEFT JOIN FUELS f ON v.FUEL_ID = f.ID
LEFT JOIN TITLE_STATUSES ts ON v.TITLE_STATUS_ID = ts.ID
LEFT JOIN TRANSMISSIONS tr ON v.TRANSMISSION_ID = tr.ID
LEFT JOIN DRIVES d ON v.DRIVE_ID = d.ID
LEFT JOIN SIZES s ON v.SIZE_ID = s.ID
LEFT JOIN TYPES t ON v.TYPE_ID = t.ID
LEFT JOIN PAINT_COLORS pc ON v.PAINT_COLOR_ID = pc.ID;

-- Vista de estadísticas por fabricante
CREATE OR REPLACE VIEW VW_STATS_BY_MANUFACTURER AS
SELECT 
   m.NAME AS MANUFACTURER,
   COUNT(*) AS TOTAL_VEHICLES,
   ROUND(AVG(v.PRICE), 2) AS AVG_PRICE,
   MIN(v.PRICE) AS MIN_PRICE,
   MAX(v.PRICE) AS MAX_PRICE,
   ROUND(AVG(v.YEAR), 0) AS AVG_YEAR,
   MIN(v.YEAR) AS MIN_YEAR,
   MAX(v.YEAR) AS MAX_YEAR,
   ROUND(AVG(v.ODOMETER), 0) AS AVG_ODOMETER
FROM VEHICLES v
INNER JOIN MANUFACTURERS m ON v.MANUFACTURER_ID = m.ID
WHERE v.PRICE IS NOT NULL
GROUP BY m.NAME
ORDER BY COUNT(*) DESC;

-- Vista de estadísticas por región
CREATE OR REPLACE VIEW VW_STATS_BY_REGION AS
SELECT 
   r.REGION,
   r.COUNTRY,
   r.STATE_DATA AS STATE,
   COUNT(*) AS TOTAL_VEHICLES,
   ROUND(AVG(v.PRICE), 2) AS AVG_PRICE,
   MIN(v.PRICE) AS MIN_PRICE,
   MAX(v.PRICE) AS MAX_PRICE
FROM VEHICLES v
INNER JOIN REGIONS r ON v.REGION_ID = r.ID
WHERE v.PRICE IS NOT NULL
GROUP BY r.REGION, r.COUNTRY, r.STATE_DATA
ORDER BY COUNT(*) DESC;

-- Vista de vehículos por año
CREATE OR REPLACE VIEW VW_VEHICLES_BY_YEAR AS
SELECT 
   v.YEAR,
   COUNT(*) AS TOTAL_VEHICLES,
   ROUND(AVG(v.PRICE), 2) AS AVG_PRICE,
   COUNT(DISTINCT v.MANUFACTURER_ID) AS UNIQUE_MANUFACTURERS
FROM VEHICLES v
WHERE v.YEAR IS NOT NULL
GROUP BY v.YEAR
ORDER BY v.YEAR DESC;

-- Vista de vehículos disponibles (con filtros básicos)
CREATE OR REPLACE VIEW VW_VEHICLES_AVAILABLE AS
SELECT 
   v.ID,
   m.NAME AS MANUFACTURER,
   v.MODEL,
   v.YEAR,
   v.PRICE,
   v.ODOMETER,
   c.NAME AS CONDITION,
   f.NAME AS FUEL,
   tr.NAME AS TRANSMISSION,
   r.REGION,
   r.STATE_DATA AS STATE,
   v.POSTING_DATE
FROM VEHICLES v
LEFT JOIN MANUFACTURERS m ON v.MANUFACTURER_ID = m.ID
LEFT JOIN CONDITIONS c ON v.CONDITION_ID = c.ID
LEFT JOIN FUELS f ON v.FUEL_ID = f.ID
LEFT JOIN TRANSMISSIONS tr ON v.TRANSMISSION_ID = tr.ID
LEFT JOIN REGIONS r ON v.REGION_ID = r.ID
WHERE v.PRICE IS NOT NULL 
  AND v.PRICE > 0
  AND v.YEAR IS NOT NULL
ORDER BY v.POSTING_DATE DESC;

-- Vista resumen de catálogos
CREATE OR REPLACE VIEW VW_CATALOG_SUMMARY AS
SELECT 'MANUFACTURERS' AS CATALOG, COUNT(*) AS TOTAL FROM MANUFACTURERS
UNION ALL
SELECT 'REGIONS', COUNT(*) FROM REGIONS
UNION ALL
SELECT 'CONDITIONS', COUNT(*) FROM CONDITIONS
UNION ALL
SELECT 'FUELS', COUNT(*) FROM FUELS
UNION ALL
SELECT 'TRANSMISSIONS', COUNT(*) FROM TRANSMISSIONS
UNION ALL
SELECT 'TYPES', COUNT(*) FROM TYPES
UNION ALL
SELECT 'PAINT_COLORS', COUNT(*) FROM PAINT_COLORS
UNION ALL
SELECT 'VEHICLES', COUNT(*) FROM VEHICLES;

-- Vista para consultar reportes estadísticos
CREATE OR REPLACE VIEW VW_VEHICLE_REPORTS AS
SELECT 
    REPORT_ID,
    REPORT_TYPE AS TIPO_REPORTE,
    TO_CHAR(PERIOD_START, 'DD/MM/YYYY') AS FECHA_INICIO,
    TO_CHAR(PERIOD_END, 'DD/MM/YYYY') AS FECHA_FIN,
    DIMENSION_VALUE AS DIMENSION,
    TOTAL_VEHICLES AS TOTAL_VEHICULOS,
    TO_CHAR(AVG_PRICE, '999,999,999.99') AS PRECIO_PROMEDIO,
    TO_CHAR(MIN_PRICE, '999,999,999.99') AS PRECIO_MINIMO,
    TO_CHAR(MAX_PRICE, '999,999,999.99') AS PRECIO_MAXIMO,
    TO_CHAR(TOTAL_VALUE, '999,999,999,999.99') AS VALOR_TOTAL,
    TO_CHAR(GENERATION_DATE, 'DD/MM/YYYY HH24:MI:SS') AS FECHA_GENERACION,
    GENERATED_BY AS GENERADO_POR
FROM VEHICLE_REPORTS
ORDER BY GENERATION_DATE DESC, REPORT_TYPE, DIMENSION_VALUE;

COMMIT;

-- =====================================================
-- VISTAS PIVOT PARA ANÁLISIS TEMPORAL
-- =====================================================

-- Vista PIVOT: Vehículos por fabricante y año (columnas = años)
CREATE OR REPLACE VIEW VW_VEHICLES_PIVOT_BY_YEAR AS
SELECT 
    MANUFACTURER,
    NVL("2015", 0) AS "AÑO_2015",
    NVL("2016", 0) AS "AÑO_2016", 
    NVL("2017", 0) AS "AÑO_2017",
    NVL("2018", 0) AS "AÑO_2018",
    NVL("2019", 0) AS "AÑO_2019",
    NVL("2020", 0) AS "AÑO_2020",
    NVL("2021", 0) AS "AÑO_2021",
    NVL("2022", 0) AS "AÑO_2022",
    NVL("2023", 0) AS "AÑO_2023",
    NVL("2024", 0) AS "AÑO_2024",
    ("2015" + "2016" + "2017" + "2018" + "2019" + "2020" + "2021" + "2022" + "2023" + "2024") AS TOTAL_VEHICULOS
FROM (
    SELECT 
        m.NAME AS MANUFACTURER,
        v.YEAR,
        COUNT(*) AS VEHICLE_COUNT
    FROM VEHICLES v
    INNER JOIN MANUFACTURERS m ON v.MANUFACTURER_ID = m.ID
    WHERE v.YEAR BETWEEN 2015 AND 2024
    GROUP BY m.NAME, v.YEAR
) SOURCE
PIVOT (
    SUM(VEHICLE_COUNT)
    FOR YEAR IN (2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)
)
ORDER BY TOTAL_VEHICULOS DESC;

-- Vista PIVOT: Precios promedio por región y año
CREATE OR REPLACE VIEW VW_PRICES_PIVOT_BY_YEAR AS
SELECT 
    REGION,
    ROUND(NVL("2015", 0), 0) AS "PRECIO_2015",
    ROUND(NVL("2016", 0), 0) AS "PRECIO_2016",
    ROUND(NVL("2017", 0), 0) AS "PRECIO_2017", 
    ROUND(NVL("2018", 0), 0) AS "PRECIO_2018",
    ROUND(NVL("2019", 0), 0) AS "PRECIO_2019",
    ROUND(NVL("2020", 0), 0) AS "PRECIO_2020",
    ROUND(NVL("2021", 0), 0) AS "PRECIO_2021",
    ROUND(NVL("2022", 0), 0) AS "PRECIO_2022",
    ROUND(NVL("2023", 0), 0) AS "PRECIO_2023",
    ROUND(NVL("2024", 0), 0) AS "PRECIO_2024"
FROM (
    SELECT 
        r.REGION,
        v.YEAR,
        AVG(v.PRICE) AS AVG_PRICE
    FROM VEHICLES v
    INNER JOIN REGIONS r ON v.REGION_ID = r.ID
    WHERE v.YEAR BETWEEN 2015 AND 2024
      AND v.PRICE IS NOT NULL
      AND v.PRICE > 0
    GROUP BY r.REGION, v.YEAR
) SOURCE
PIVOT (
    AVG(AVG_PRICE)
    FOR YEAR IN (2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)
)
ORDER BY REGION;

-- Vista PIVOT: Distribución de tipos de combustible por año
CREATE OR REPLACE VIEW VW_FUEL_PIVOT_BY_YEAR AS
SELECT 
    FUEL_TYPE,
    NVL("2015", 0) AS "FUEL_2015",
    NVL("2016", 0) AS "FUEL_2016",
    NVL("2017", 0) AS "FUEL_2017",
    NVL("2018", 0) AS "FUEL_2018", 
    NVL("2019", 0) AS "FUEL_2019",
    NVL("2020", 0) AS "FUEL_2020",
    NVL("2021", 0) AS "FUEL_2021",
    NVL("2022", 0) AS "FUEL_2022",
    NVL("2023", 0) AS "FUEL_2023",
    NVL("2024", 0) AS "FUEL_2024",
    ("2015" + "2016" + "2017" + "2018" + "2019" + "2020" + "2021" + "2022" + "2023" + "2024") AS TOTAL_POR_COMBUSTIBLE
FROM (
    SELECT 
        f.NAME AS FUEL_TYPE,
        v.YEAR,
        COUNT(*) AS FUEL_COUNT
    FROM VEHICLES v
    INNER JOIN FUELS f ON v.FUEL_ID = f.ID
    WHERE v.YEAR BETWEEN 2015 AND 2024
    GROUP BY f.NAME, v.YEAR
) SOURCE
PIVOT (
    SUM(FUEL_COUNT)
    FOR YEAR IN (2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)
)
ORDER BY TOTAL_POR_COMBUSTIBLE DESC;

-- Vista PIVOT: Análisis de condiciones de vehículos por año
CREATE OR REPLACE VIEW VW_CONDITION_PIVOT_BY_YEAR AS
SELECT 
    CONDITION_TYPE,
    NVL("2015", 0) AS "COND_2015",
    NVL("2016", 0) AS "COND_2016",
    NVL("2017", 0) AS "COND_2017",
    NVL("2018", 0) AS "COND_2018",
    NVL("2019", 0) AS "COND_2019", 
    NVL("2020", 0) AS "COND_2020",
    NVL("2021", 0) AS "COND_2021",
    NVL("2022", 0) AS "COND_2022",
    NVL("2023", 0) AS "COND_2023",
    NVL("2024", 0) AS "COND_2024"
FROM (
    SELECT 
        c.NAME AS CONDITION_TYPE,
        v.YEAR,
        COUNT(*) AS CONDITION_COUNT
    FROM VEHICLES v
    INNER JOIN CONDITIONS c ON v.CONDITION_ID = c.ID
    WHERE v.YEAR BETWEEN 2015 AND 2024
    GROUP BY c.NAME, v.YEAR
) SOURCE
PIVOT (
    SUM(CONDITION_COUNT)
    FOR YEAR IN (2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024)
)
ORDER BY CONDITION_TYPE;

COMMIT;

PROMPT 'Vistas PIVOT para análisis temporal creadas exitosamente';
